openapi: 3.0.2
info:
  title: ''
  version: ''
paths:
  /accounts/users/current/:
    get:
      operationId: getCurrentUser
      description: ''
      parameters: []
      responses:
        '200':
          description: Returns the current authenticated User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: The requester is not authenticated.
      tags:
      - accounts
  /accounts/users/{username}/membership_subscription/:
    get:
      operationId: getMembershipSubscription
      description: 'Returns the membership subscription associated

        with the specified user (owner or family member).


        The requester must either be the same user as the one specified

        or have "membership_secretary" permission.'
      parameters:
      - name: username
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipSubscription'
      tags:
      - accounts
    post:
      operationId: purchaseMembershipSubscription
      description: 'Purchases a subscription for the specified user or renews

        their existing subscription.


        The requester must either be the same user as the one specified

        or have "membership_secretary" permission.


        If the requester does not have the "membership_secretary" permission,

        or if the membership secretary is renewing their own membership,

        a stripe checkout session is created and returned with 202 status.

        Otherwise, the requested user''s subscription is updated immediately

        (no payment is initiated).


        If a new subscription was created,

        the subscription data is returned with 201 status.

        If an existing subscription was renewed, the updated subscription

        data is returned with 200 status.


        If the requested user is a lifetime member, no action is taken

        and 400 status is returned.'
      parameters:
      - name: username
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                membership_type:
                  type: string
                  enum:
                  - regular
                  - student
                donation:
                  type: integer
              required:
              - membership_type
      responses:
        '202':
          content:
            application/json:
              schema:
                description: A stripe session checkout ID.
                type: string
      tags:
      - accounts
    put:
      operationId: updateMembershipSubscription
      description: 'Sets the family members of the requested user''s subscription
        to

        the users with the given usernames. If any of the usernames

        don''t exist, then a User object will be created.


        (FUTURE) Newly added family members will receive an username

        notification.'
      parameters:
      - name: username
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - accounts
  /accounts/users/:
    get:
      operationId: listUsers
      description: ''
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
          description: ''
      tags:
      - accounts
  /accounts/users/{username}/:
    get:
      operationId: retrieveUser
      description: ''
      parameters:
      - name: username
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - accounts
    put:
      operationId: updateUser
      description: ''
      parameters:
      - name: username
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - accounts
    patch:
      operationId: partialUpdateUser
      description: ''
      parameters:
      - name: username
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - accounts
  /accounts/register/:
    post:
      operationId: registerUser
      description: Creates a new user and returns an auth token
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  format: email
                password:
                  type: string
            required:
            - username
            - password
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
      tags:
      - accounts
  /token_auth/:
    post:
      operationId: createAuthToken
      description: ''
      parameters: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
      tags:
      - token-auth
  /accounts/users/{username}/username/:
    put:
      operationId: changeUsername
      description: ''
      parameters:
      - name: username
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  format: email
            required:
            - username
      responses:
        '202':
          description: NOT YET IMPLEMENTED. An email is sent to the new email address
            with a link to validate and finish updating the new email address.
        '200':
          description: If the request was sent by the membership secretary (to update
            another user's username), the username is immediately updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      tags:
      - accounts
components:
  schemas:
    MembershipSubscription:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        owner:
          type: object
          properties:
            id:
              type: integer
              readOnly: true
            username:
              type: string
              format: email
              maxLength: 254
            first_name:
              type: string
              maxLength: 150
            last_name:
              type: string
              maxLength: 150
          required:
          - username
          readOnly: true
        family_members:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                readOnly: true
              username:
                type: string
                format: email
                maxLength: 254
              first_name:
                type: string
                maxLength: 150
              last_name:
                type: string
                maxLength: 150
            required:
            - username
        valid_until:
          type: string
          format: date-time
          readOnly: true
        membership_type:
          enum:
          - regular
          - student
          - lifetime
          type: string
          readOnly: true
      required:
      - family_members
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        owned_subscription:
          type: object
          properties:
            id:
              type: integer
              readOnly: true
            created_at:
              type: string
              format: date-time
              readOnly: true
            last_modified:
              type: string
              format: date-time
              readOnly: true
            valid_until:
              type: string
              format: date-time
              nullable: true
            membership_type:
              enum:
              - regular
              - student
              - lifetime
              type: string
            owner:
              type: integer
          required:
          - membership_type
          - owner
          readOnly: true
        subscription_is_family_member_for:
          type: object
          properties:
            id:
              type: integer
              readOnly: true
            created_at:
              type: string
              format: date-time
              readOnly: true
            last_modified:
              type: string
              format: date-time
              readOnly: true
            valid_until:
              type: string
              format: date-time
              nullable: true
            membership_type:
              enum:
              - regular
              - student
              - lifetime
              type: string
            owner:
              type: integer
          required:
          - membership_type
          - owner
          readOnly: true
    AuthToken:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        token:
          type: string
          readOnly: true
      required:
      - username
      - password
